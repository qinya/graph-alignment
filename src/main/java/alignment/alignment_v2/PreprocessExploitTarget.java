package alignment.alignment_v2;

import java.util.Collections;
import java.util.Comparator;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.UUID;
import java.util.Iterator;

import org.jdom2.Element;
import org.jdom2.Namespace;
import org.jdom2.Attribute;

/**
 * Splitting list of Vulnerabilites from one Exploit_Target to multiple related Exploit_Targets.
 *
 * @author Maria Vincent
 */

abstract class PreprocessExploitTarget {

	private static final Namespace etNS = Namespace.getNamespace("et", "http://stix.mitre.org/ExploitTarget-1");
	private static final Namespace stixCommonNS = Namespace.getNamespace("stixCommon", "http://stix.mitre.org/common-1");
	private static final Namespace stuccoNS = Namespace.getNamespace("stucco", "gov.ornl.stucco");

	private static final Map<String, Integer> propOrder;

	static {
		Map<String, Integer> map = new HashMap<String, Integer>();
		map.put("Title", 0);
		map.put("Description", 1);
		map.put("Short_Description", 2); 
		map.put("Vulnerability", 3);
		map.put("Weakness", 4);
		map.put("Configuration", 5);
		map.put("Potential_COAs", 6); 
		map.put("Information_Source", 7);
		map.put("Handling", 8);
		map.put("Related_Exploit_Targets", 9);
		map.put("Related_Packages", 10);
		propOrder = Collections.unmodifiableMap(map);
	}

	private static class ETComparator implements Comparator<Element> {
		public int compare(Element e1, Element e2) {
			return propOrder.get(e1.getName()).compareTo(propOrder.get(e2.getName()));
		}	
	}

	public static Map<String, Element> normalizeET(Element et) {
		List<Element> vulnerabilityList = et.getChildren("Vulnerability", etNS);
		if (vulnerabilityList == null) {
			return null;
		}
		if (vulnerabilityList.size() < 2) {
			return null;
		}
		Map<String, Element> map = new HashMap<String, Element>();
		Iterator<Element> iterator = vulnerabilityList.iterator();
		iterator.next();
		while (iterator.hasNext()) {
			Element clone = et.clone();
			clone.removeChildren("Vulnerability", etNS);
			Element element = iterator.next();
			iterator.remove();
			clone.addContent(element);
			Attribute id = new Attribute("id", "stucco:ExploitTarget-" + UUID.randomUUID().toString());
			clone.setAttribute(id);
			clone.addNamespaceDeclaration(stuccoNS);
			map.put(id.getValue(), clone);
		}
		setRelatedETs(et, map);
		
		return map;
	}

	private static void setRelatedETs(Element et, Map<String, Element> map) {
		Element relatedETs = et.getChild("Related_TTPs", etNS);
		if (relatedETs == null) {
			relatedETs = new Element("Related_Exploit_Targets", etNS);
			et.addContent(relatedETs);
		}
		for (String id : map.keySet()) {
			Element relatedET = new Element("Related_Exploit_Target", etNS);
			Element etReference = new Element("Exploit_Target", stixCommonNS);
			etReference.setAttribute("idref", id);
			relatedET.setContent(etReference);
			relatedETs.addContent(relatedET);
		}
		et.sortChildren(new ETComparator());
	}
}












